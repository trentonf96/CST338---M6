import javax.swing.border.*;
import javax.swing.*;
import java.awt.*;
import java.text.DecimalFormat;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Group Assignment for Module 6: Timed "Build" Game. For this 
 * assignment, we start by restructuring last weeks assignment to
 * fit the Model-View-Controller design pattern. We then implement
 * multi-threading in the assignment by creating a stopwatch. Lastly,
 * we create a game called "Build".
 * 
 * by Cohort 12, Pyrocumulus team:
 * Joshan Dillon, Trenton Fengel, Tabitha Micheels, Marianna Petrovich
 * 
 * 12/8/2020
 * 
 * PHASE 3
 */

public class Assig6
{
   public static void main(String [] args)
   {
      GameModel model = new GameModel();
      GameView view = new GameView();
      GameController controller = new GameController(model, view);
      controller.playGame();
   }
}

public class Timer extends Thread implements Runnable
{
   // Data
   final int ONE_SEC = 1000;
   private int min, sec;
   static boolean threadSuspended;
   
   // Constructor
   Timer()
   {
      min = 0;
      sec = 0;
      threadSuspended = false;
   }
   
   // Increments timer minutes and seconds
   public synchronized void run()
   {
      GameView.startStop.setText("Stop");
      for (min = 0; min < 99; min++)
      {
         for (sec = 0; sec < 59; sec++)
         {
            do
            {
               doNothing(ONE_SEC);
            }
            while (threadSuspended);
            GameView.updateTimer(min, sec);
         }
         sec = 0;
      }
   }
   
   // Accessors
   public int getMin()
   {
      return min;
   }
   
   public int getSec()
   {
      return sec;
   }
   
   // Pauses thread for 1 second
   public synchronized void doNothing(int milliseconds)
   {
      try
      {
         Thread.sleep(milliseconds);
      }
      catch (InterruptedException e)
      {
         System.out.println("Error: unexpected interrupt");
         return;
      }
   }
}

class GameController
{
   private GameModel model;
   private GameView view;
   private Thread timer = new Thread(new Timer());
   static Card[] playAreaCards;
   
   private class StartStopListener implements ActionListener
   {
      public void actionPerformed(ActionEvent e)
      {
         // If thread hasn't been started, run it
         if (!timer.isAlive())
         {
            timer.start();
         }
         else // Alternate button text between start and stop
         {
            Timer.threadSuspended = !Timer.threadSuspended;

            if (GameView.startStop.getText() == "Stop")
            {
               GameView.startStop.setText("Start");
            }
            else
            {
               GameView.startStop.setText("Stop");
            }
         }
      }
   }
   
   private class CannotPlayListener implements ActionListener
   {
      public void actionPerformed(ActionEvent e)
      {
         
      }
   }
   
   GameController(GameModel model, GameView view)
   {
      this.model = model;
      this.view = view;
      
      // Add ActionListeners to buttons
      GameView.startStop.addActionListener(new StartStopListener());
      GameView.cannotPlay.addActionListener(new CannotPlayListener());
      
      // Populate stacks with initial cards
      playAreaCards = new Card[3];
      for (int i = 0; i < playAreaCards.length; i++)
      {
         playAreaCards[i] = model.getFramework().getCardFromDeck();
      }
   }
   
   public void playGame()
   {
      for (int k = 0; k < GameModel.NUM_CARDS_PER_HAND; k++)
      {
         final int thisIndex = k;
         view.displayHands(thisIndex, model.getFramework());
         view.updateDeck(model.getFramework().getNumCardsRemainingInDeck());
         view.updatePlayArea(playAreaCards);
         
         GameView.humanLabels[k].addMouseListener(new MouseAdapter() 
         {

            public void mouseClicked(MouseEvent me)
            {
               playMyCard(thisIndex);
            }
               
            private void playMyCard(int idx)
            {
               view.updateMessage("Now choose a stack");
               for (int i = 0; i < GameView.playedCardLabels.length; i++)
               {
                  final int stack = i;
                  GameView.playedCardLabels[i].addMouseListener(new MouseAdapter() {
                     public void mouseClicked(MouseEvent mo)
                     {
                        chooseStack(stack);
                     }
                     
                     private void chooseStack(int stack)
                     {
                        String result = "";
                        
                        // If chosen card in hand is one less or one more in value than stack card
                        Card myCard = model.getFramework().getHand(1).inspectCard(idx);
                        if (Card.valueToInt(myCard) == (Card.valueToInt(playAreaCards[stack]) + 1)
                              || Card.valueToInt(myCard) == (Card.valueToInt(playAreaCards[stack]) - 1))
                        {
                           // Change message
                           view.updateMessage("Successful move, choose another card");
                           
                           // Play card and draw from deck
                           playAreaCards[stack] = model.getFramework().getHand(1).playCard(idx);
                           model.getFramework().takeCard(1);
                           
                           //
                           view.updatePlayArea(playAreaCards);
                           view.updateHands(idx, model.getFramework());
                           view.updateDeck(model.getFramework().getNumCardsRemainingInDeck());
                        }
                        else
                        {
                           view.updateMessage("Invalid move");
                        }
                        
                        //
                        for (int x = 0; x < idx; x++)
                        {
                           for (int z = 0; z < stack; z++)
                           {
                              if (Card.valueToInt(model.getFramework().getHand(0).inspectCard(x)) == (Card.valueToInt(playAreaCards[z]) + 1)
                                    || Card.valueToInt(model.getFramework().getHand(0).inspectCard(x)) == (Card.valueToInt(playAreaCards[z]) - 1))
                              {
                                 view.updateMessage("Computer player placed card");
                                 
                                 //
                                 playAreaCards[z] = model.getFramework().getHand(0).playCard(x);
                                 model.getFramework().takeCard(0);
                                 
                                 //
                                 view.updatePlayArea(playAreaCards);
                                 view.updateHands(x, model.getFramework());
                                 view.updateDeck(model.getFramework().getNumCardsRemainingInDeck());
                              }
                           }
                        }
                     }
                  });
               }
               view.updateScore(GameModel.myScore, GameModel.computerScore);
            }
         });
         view.updateHands(k, model.getFramework());
      }
   }
}

class GameView
{
   // Data
   static JLabel[] computerLabels = new JLabel[GameModel.NUM_CARDS_PER_HAND];
   static JLabel[] humanLabels = new JLabel[GameModel.NUM_CARDS_PER_HAND];  
   static JLabel[] playedCardLabels  = new JLabel[3]; 
   static JLabel[] playLabelText  = new JLabel[3];
   static JLabel alertLabel = new JLabel("Click card to play", JLabel.CENTER);
   static JLabel scoreLabel = new JLabel("Computer: 0 You: 0", JLabel.CENTER);
   static JLabel deckLabel = new JLabel("# of Cards in the Deck: ", JLabel.CENTER);
   static JLabel timerLabel = new JLabel("00:00");
   static JButton startStop = new JButton("Start");
   static JButton cannotPlay = new JButton("Cannot Play");
   static DecimalFormat twoDigits = new DecimalFormat("00");
   Font font = new Font("SANS_SERIF",Font.BOLD,15);
   Font messageFont = new Font("SANS_SERIF",Font.BOLD,12);
   Font timerFont = new Font("SANS_SERIF",Font.BOLD,18);
   
   // establish main frame in which program will run
   private CardTable myCardTable 
         = new CardTable("CardTable", GameModel.NUM_CARDS_PER_HAND, 
               GameModel.NUM_PLAYERS);
   
   GameView()
   {  
      myCardTable.setSize(900, 700);
      myCardTable.setLocationRelativeTo(null);
      myCardTable.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      display();
   }
   
   public void display()
   {
      // Add two random cards in the play region (simulating a computer/hum ply)
      playedCardLabels[0] = new JLabel(GUICard.getIcon(GameModel.randomCardGenerator()));
      playedCardLabels[1] = new JLabel(GUICard.getIcon(GameModel.randomCardGenerator()));
      playedCardLabels[2] = new JLabel(GUICard.getIcon(GameModel.randomCardGenerator()));
      playedCardLabels[0].setVisible(false);
      playedCardLabels[1].setVisible(false);
      playedCardLabels[2].setVisible(false);
      
      // Add number of cards in deck label to panel
      deckLabel.setFont(font);
      deckLabel.setForeground(Color.BLACK);
      myCardTable.pnlDeck.add(deckLabel);
      
      // Add timer numbers
      timerLabel.setFont(timerFont);
      myCardTable.pnlTimer.add(timerLabel);
      timerLabel.setHorizontalAlignment(JLabel.CENTER);
      
      // Add buttons
      startStop.setFocusable(false);
      cannotPlay.setFocusable(false);
      myCardTable.pnlTimer.add(myCardTable.pnlTimerBtn);
      myCardTable.pnlTimerBtn.add(startStop);
      
      // Style and add the alert labels
      alertLabel.setBackground(new Color(159, 226, 191));
      alertLabel.setOpaque(true); // this is our status message 
      alertLabel.setFont(messageFont);
      scoreLabel.setBackground(new Color(204, 204, 255));
      scoreLabel.setOpaque(true); // this is our status message 
      scoreLabel.setFont(font);
      myCardTable.pnlMessage.add(alertLabel, JLabel.CENTER);
      myCardTable.pnlMessage.add(myCardTable.pnlMessageBtn);
      myCardTable.pnlMessageBtn.add(cannotPlay);
      myCardTable.pnlAlerts.add(myCardTable.pnlMessage);
      myCardTable.pnlScore.add(scoreLabel, JLabel.CENTER);
      myCardTable.pnlAlerts.add(myCardTable.pnlScore);
      myCardTable.pnlAlerts.add(myCardTable.pnlTimerArea);
      
      // Style and add the playing area labels
      playLabelText[0] = new JLabel("Stack 1");
      playLabelText[0].setHorizontalAlignment(JLabel.CENTER);
      playLabelText[0].setFont(font);
      playLabelText[0].setForeground(Color.BLACK);
      playLabelText[1] = new JLabel("Stack 2");
      playLabelText[1].setHorizontalAlignment(JLabel.CENTER);
      playLabelText[1].setFont(font);
      playLabelText[1].setForeground(Color.BLACK);
      playLabelText[2] = new JLabel("Stack 3");
      playLabelText[2].setHorizontalAlignment(JLabel.CENTER);
      playLabelText[2].setFont(font);
      playLabelText[2].setForeground(Color.BLACK);
      myCardTable.pnlPlayArea.add(playedCardLabels[0]);
      myCardTable.pnlPlayArea.add(playedCardLabels[1]);
      myCardTable.pnlPlayArea.add(playedCardLabels[2]);
      myCardTable.pnlPlayArea.add(playLabelText[0]);
      myCardTable.pnlPlayArea.add(playLabelText[1]);
      myCardTable.pnlPlayArea.add(playLabelText[2]);

      // show everything to the user
      myCardTable.setVisible(true);
   }
   
   public void displayHands(int k, CardGameFramework LowCardGame)
   {
      // deal back cards to computer
      computerLabels[k] = new JLabel(GUICard.getBackCardIcon());

      // give human random cards
      humanLabels[k] = new JLabel(GUICard.getIcon(LowCardGame.getHand(1).inspectCard(k)));
   }
   
   static void updateTimer(int min, int sec)
   {
      timerLabel.setText(twoDigits.format(min) + ":" + twoDigits.format(sec));
   }
   
   public void updateScore(int computerScore, int myScore)
   {
      scoreLabel.setText("Computer: " + computerScore + " You: " + myScore);
   }
   
   public void updateMessage(String result)
   {
      alertLabel.setText(result);
   }
   
   public void updateDeck(int cards)
   {
      deckLabel.setText("# of Cards in the Deck: " + cards);
   }
   
   public void updateHands(int k, CardGameFramework LowCardGame)
   {
      // deal back cards to computer
      myCardTable.pnlComputerHand.add(computerLabels[k]);

      // give human random cards
      myCardTable.pnlHumanHand.add(humanLabels[k]);
      
   }
   
   public void updatePlayArea (Card[] card)
   {
   // 0 - computer, 1 - human
      // move cards to playing area
      playedCardLabels[0].setIcon(GUICard.getIcon(card[0]));
      playedCardLabels[1].setIcon(GUICard.getIcon(card[1]));
      playedCardLabels[2].setIcon(GUICard.getIcon(card[2]));

      playedCardLabels[0].setVisible(true);
      playedCardLabels[1].setVisible(true);
      playedCardLabels[2].setVisible(true);
   }
}

class GameModel
{
   static int NUM_CARDS_PER_HAND = 7;
   static int NUM_PLAYERS = 2;
   static int myScore = 0, computerScore = 0;
   int numPacksPerDeck = 1;
   int numJokersPerPack = 2;
   int numUnusedCardsPerPack = 0;
   Card[] unusedCardsPerPack = null;
   private CardGameFramework lowCardGame;
   
   GameModel()
   {
      lowCardGame = new CardGameFramework(numPacksPerDeck, numJokersPerPack, 
            numUnusedCardsPerPack, unusedCardsPerPack, NUM_PLAYERS, 
            NUM_CARDS_PER_HAND);// Load Icons from GUICard class
      GUICard.loadCardIcons();
      lowCardGame.deal();
   }
   
   public CardGameFramework getFramework()
   {
      return lowCardGame;
   }

   static Card randomCardGenerator()
   {
      Deck deck = new Deck();
      return deck.inspectCard(deck.rand.nextInt(deck.getNumCards()));
   }
}

class CardTable extends JFrame
{
   static int MAX_CARDS_PER_HAND = 56;
   static int MAX_PLAYERS = 2;  // for now, we only allow 2 person games
   
   private int numCardsPerHand;
   private int numPlayers;

   public JPanel pnlComputerHand, pnlHumanHand, pnlPlayArea, pnlTimerArea, 
      pnlTimer, pnlTimerBtn, pnlAlerts, pnlDeck, pnlScore, pnlMessage, pnlMessageBtn;
   
   public int getNumCards()
   {
      return numCardsPerHand;
   }
   
   public int getNumPlayers()
   {
      return numPlayers;
   }
   
   CardTable(String title, int numCardsPerHand, int numPlayers) 
   {
      super(title);
      this.numPlayers = numPlayers; 
      this.numCardsPerHand = numCardsPerHand; 

      getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
      
      pnlDeck = new JPanel(new BorderLayout());
      pnlDeck.setLayout(new GridLayout(1, 3));
      pnlDeck.setBackground(new Color(53, 111, 77));
      add(pnlDeck);

      TitledBorder compBorder = BorderFactory.createTitledBorder("Computer Hand");
      compBorder.setTitleColor(Color.BLACK);
      pnlComputerHand = new JPanel(new GridLayout(1, numCardsPerHand));
      pnlComputerHand.setBorder(compBorder);
      pnlComputerHand.setBackground(new Color(53, 111, 77));
      add(pnlComputerHand);
      
      TitledBorder playBorder = BorderFactory.createTitledBorder("Playing Area");
      playBorder.setTitleColor(Color.BLACK);
      pnlPlayArea = new JPanel(new GridLayout(2, 3));
      pnlPlayArea.setBorder(playBorder);
      pnlPlayArea.setBackground(new Color(53, 111, 77));
      add(pnlPlayArea);
         
      TitledBorder humanBorder = BorderFactory.createTitledBorder("Your Hand");
      humanBorder.setTitleColor(Color.BLACK);
      pnlHumanHand = new JPanel(new GridLayout(1, numCardsPerHand));
      pnlHumanHand.setBorder(humanBorder);
      pnlHumanHand.setBackground(new Color(53, 111, 77));
      add(pnlHumanHand);
      
      pnlAlerts = new JPanel(new GridLayout(1, 3));
      add(pnlAlerts);
      
      TitledBorder scoreBorder = BorderFactory.createTitledBorder("# of \"Cannot Plays\"");
      scoreBorder.setTitleColor(Color.BLACK);
      pnlScore = new JPanel(new GridLayout(1, 1));
      pnlScore.setBorder(scoreBorder);
      pnlScore.setBackground(new Color(204, 204, 255));
      
      TitledBorder messageBorder = BorderFactory.createTitledBorder("Message");
      messageBorder.setTitleColor(Color.BLACK);
      pnlMessage = new JPanel(new GridLayout(2, 1));
      pnlMessage.setBorder(messageBorder);
      pnlMessage.setBackground(new Color(159, 226, 191));
      
      pnlMessageBtn = new JPanel(new GridLayout(1, 1));
      pnlMessageBtn.setBorder(new EmptyBorder(0, 60, 10, 60));
      pnlMessageBtn.setBackground(new Color(159, 226, 191));
      
      TitledBorder timerBorder = BorderFactory.createTitledBorder("Timer");
      timerBorder.setTitleColor(Color.BLACK);
      pnlTimerArea = new JPanel(new GridLayout(1, 1));
      pnlTimerArea.setBorder(timerBorder);
      pnlTimerArea.setBackground(new Color(255, 155, 155));
      
      pnlTimer = new JPanel(new GridLayout(2, 1));
      pnlTimer.setBorder(new EmptyBorder(0, 60, 0, 60));
      pnlTimer.setBackground(new Color(255, 155, 155));
      pnlTimerArea.add(pnlTimer);
      
      pnlTimerBtn = new JPanel(new GridLayout(1, 1));
      pnlTimerBtn.setBorder(new EmptyBorder(0, 0, 10, 0));
      pnlTimerBtn.setBackground(new Color(255, 155, 155));
      
   }
}

class GUICard
{
   // Data
   private static Icon[][] iconCards = new ImageIcon[14][4];
   private static Icon iconBack;
   static boolean iconsLoaded = false;
   
   //
   static void loadCardIcons()
   {
      if (!iconsLoaded)
      {
         iconBack = new ImageIcon("images/BK.gif");
         for (int val = 0; val < iconCards.length; val++)
         {
            for (int suit = 0; suit < iconCards[val].length; suit++)
            {
               iconCards[val][suit] = new ImageIcon("images/" + 
               turnIntIntoCardValue(val) + turnIntIntoCardSuit(suit) + ".gif");
            }
         }
         iconsLoaded = true;
      }
   }
   
   // turns 0 - 13 into "A", "2", "3", ... "Q", "K", "X"
   static String turnIntIntoCardValue(int k)
   {
      String val = "A23456789TJQKX";
      return val.substring(k, k + 1);
   }
   
   // turns 0 - 3 into "C", "D", "H", "S"
   static String turnIntIntoCardSuit(int j)
   {
      String suit = "CDHS";
      return suit.substring(j, j + 1);
   }
   
   // Accessors
   public static Icon getIcon(Card card)
   {
      return iconCards[valueAsInt(card)][suitAsInt(card)];
   }
   
   public static Icon getBackCardIcon() 
   {
      return iconBack;
   }
   
   //
   static int valueAsInt(Card card)
   {
      return Card.valueToInt(card);
   }
   
   //
   static int suitAsInt(Card card)
   {
      return Card.Suit.valueOf(card.getSuit().toString()).ordinal();
   }
}

class Card
{
   // Data
   public static enum Suit { clubs, spades, hearts, diamonds };
   public static char[] valuRanks = {'2', '3', '4', '5', '6', '7', '8',
         '9', 'T', 'J', 'Q', 'K', 'A', 'X'};
   private char value;
   private Suit suit;
   private boolean errorFlag;

   // Constructors
   public Card()
   {
      set('A', Suit.spades);
   }

   public Card(char value, Suit suit)
   {
      set(value, suit);
   }

   // Mutator
   public boolean set(char value, Suit suit)
   {
      this.value = value;
      this.suit = suit;

      if (isValid(value, suit))
      {
         errorFlag = false;
         return true;
      } else
      {
         errorFlag = true;
         return false;
      }
   }
   
   // Display the card data
   public String toString()
   {
      if (errorFlag || this == null)
      {
         return "** illegal **";
      } 
      else
      {
         return value + " of " + suit;
      }
   }

   // Accessors
   public char getValue()
   {
      return value;
   }

   public Suit getSuit()
   {
      return suit;
   }

   public boolean getErrorFlag()
   {
      return errorFlag;
   }

   // Returns true if the members are identical
   public boolean equals(Card card)
   {
      if (this.getValue() == card.getValue() && 
          this.getSuit() == card.getSuit() &&
          this.getErrorFlag() == card.getErrorFlag())
      {
         return true;
      } 
      else
      {
         return false;
      }
   }

   // checks for the legality of the parameters
   private boolean isValid(char value, Suit suit)
   {
      // Check validity of value
      String vals = "A23456789TJQKX";
      for (int i = 0; i < 14; i++)
      {
         if (value == vals.charAt(i))
         {
            return true;
         }
      }
      return false;
   }
   
   // Sort method helper
   static int valueToInt(Card card)
   {
      for (int i = 0; i < valuRanks.length; i++)
      {
         if (card.getValue() == valuRanks[i])
         {
            return i;
         }
      }
      return -1;
   }
   
   // Bubble sort
   static void arraySort(Card[] cardArr, int arraySize)
   {
      Card temp;
      int swaps = 0;
      boolean sorted = false;
      while (!sorted)
      {
         for (int element = 0; element < arraySize - 1; element++)
         {
            if (valueToInt(cardArr[element]) > valueToInt(cardArr[element + 1]))
            {
               temp = cardArr[element];
               cardArr[element] = cardArr[element + 1];
               cardArr[element + 1] = temp;
               swaps++;
            }
         }
         if (swaps == 0)
            sorted = true;
         else
            swaps = 0;
      }
   }
}

class Deck
{
   // Variables and arrays
   Random rand = new Random();
   public static final int DECK_COUNT = 56;
   public static final int MAX_CARDS = 6 * DECK_COUNT;
   private static Card[] masterPack;
   private Card[] cards;
   private int topCard;

   // Constructors
   Deck(int numPacks)
   {
      allocateMasterPack();
      init(numPacks);
   }

   Deck()
   {
      this(1);
   }

   // Re-populates card[]
   public void init(int numPacks)
   {
      if (numPacks <= 6)
      {
         this.topCard = DECK_COUNT * numPacks;
         this.cards = new Card[topCard];
         for (int i = 0; i < numPacks; i++)
         {
            for (int j = 0; j < masterPack.length; j++)
            {
               cards[j + (DECK_COUNT*i)] = new Card(masterPack[j].getValue(), 
                     masterPack[j].getSuit());
            }
         }
      }
   }

   // Mixes up the cards
   public void shuffle()
   {
      for (int i = 0; i < cards.length; i++)
      {
         int num = rand.nextInt(cards.length);
         Card temp = cards[i];
         cards[i] = cards[num];
         cards[num] = temp;
      }
   }

   // Returns and removes the top card
   public Card dealCard()
   {
      topCard--;
      // Copy top card
      Card topCardFromDeck = new Card(inspectCard(topCard).getValue(),
            inspectCard(topCard).getSuit());
      // if card is valid remove it from deck
      if (!topCardFromDeck.getErrorFlag())
      {
         cards[topCard] = null;
      }
      return topCardFromDeck;
   }

   // Accessors
   public int getTopCard()
   {
      return topCard;
   }
   
   public int getNumCards()
   {
      return topCard;
   }
   
   // Bubble sort
   public void sort()
   {
      Card.arraySort(cards, topCard);
   }

   // Accessor for individual cards
   public Card inspectCard(int k)
   {
      if (k < 0 || k > topCard)
      {
         Card badCard = new Card();
         badCard.set('M',Card.Suit.clubs);
         return badCard;
      } else
      {
         return cards[k];
      }
   }
   
   // Adds a card to the top of the deck and makes sure that there are
   // not too many instances of the card in the deck
   public boolean addCard(Card card)
   {
      // counter of instances of the card
      int count = checkOccurences(card);

      // Should be less than number of packs
      if (count >= (cards.length % (DECK_COUNT - 1)))
      {
         System.out.println("Error: too many instances of the card");
         return false;
      }
      else
      {
         // Take added card as a top card
         cards[topCard] = new Card(card.getValue(), card.getSuit());
         topCard++;
         return true;
      }
   }
   
   // helper to count occurences of specific card
   private int checkOccurences(Card card)
   {
   // counter of instances of the card
      int count = 0;

      // inspect all cards for the occurrence
      for (int i = 0; i < topCard; i++)
      {
         if (card.equals(cards[i]))
         {
            count++;
         }
      }
      return count;
   }
   
   // removes specific card from the deck
   // put the current top card into its place
   // if it is not in the deck, return false
   public boolean removeCard(Card card)
   {
      
      int count = checkOccurences(card);
      if (count == 0)
      {
         return false;
      }
      else
      {
         // Find the card we need to remove
         for (int i = 0; i < topCard; i++)
         {
            if (card.equals(cards[i]))
            {
               // Swap the card with the top card
               cards[i] = cards[topCard - 1];
               cards[topCard - 1] = null;
               topCard--;
            }
         }  
      }
      return true;
   }

   // Static Deck object used for copying to another object. Only executes once.
   private static void allocateMasterPack()
   {
      if (masterPack == null)
      {
         String values = "A23456789TJQKX";
         masterPack = new Card[DECK_COUNT];
         int i = 0;
         for (int v = 0; v < values.length(); v++)
         {
            for (Card.Suit s : Card.Suit.values())
            {
               masterPack[i] = new Card(values.charAt(v), s);
               i++;
            }
         }
      }
   }
}

//class CardGameFramework  ----------------------------------------------------
class CardGameFramework
{
   private static final int MAX_PLAYERS = 50;

   private int numPlayers;
   private int numPacks;            // # standard 52-card packs per deck
                                    // ignoring jokers or unused cards
   private int numJokersPerPack;    // if 2 per pack & 3 packs per deck, get 6
   private int numUnusedCardsPerPack;  // # cards removed from each pack
   private int numCardsPerHand;        // # cards to deal each player
   private Deck deck;               // holds the initial full deck and gets
                                    // smaller (usually) during play
   private Hand[] hand;             // one Hand for each player
   private Card[] unusedCardsPerPack;   // an array holding the cards not used
                                        // in the game.  e.g. pinochle does not
                                        // use cards 2-8 of any suit

   public CardGameFramework( int numPacks, int numJokersPerPack,
         int numUnusedCardsPerPack,  Card[] unusedCardsPerPack,
         int numPlayers, int numCardsPerHand)
   {
      int k;

      // filter bad values
      if (numPacks < 1 || numPacks > 6)
         numPacks = 1;
      if (numJokersPerPack < 0 || numJokersPerPack > 4)
         numJokersPerPack = 0;
      if (numUnusedCardsPerPack < 0 || numUnusedCardsPerPack > 50) //  > 1 card
         numUnusedCardsPerPack = 0;
      if (numPlayers < 1 || numPlayers > MAX_PLAYERS)
         numPlayers = 4;
      // one of many ways to assure at least one full deal to all players
      if  (numCardsPerHand < 1 ||
            numCardsPerHand >  numPacks * (52 - numUnusedCardsPerPack)
            / numPlayers )
         numCardsPerHand = numPacks * (52 - numUnusedCardsPerPack) / numPlayers;

      // allocate
      this.unusedCardsPerPack = new Card[numUnusedCardsPerPack];
      this.hand = new Hand[numPlayers];
      for (k = 0; k < numPlayers; k++)
         this.hand[k] = new Hand();
      deck = new Deck(numPacks);

      // assign to members
      this.numPacks = numPacks;
      this.numJokersPerPack = numJokersPerPack;
      this.numUnusedCardsPerPack = numUnusedCardsPerPack;
      this.numPlayers = numPlayers;
      this.numCardsPerHand = numCardsPerHand;
      for (k = 0; k < numUnusedCardsPerPack; k++)
         this.unusedCardsPerPack[k] = unusedCardsPerPack[k];

      // prepare deck and shuffle
      newGame();
   }

   // constructor overload/default for game like bridge
   public CardGameFramework()
   {
      this(1, 0, 0, null, 4, 13);
   }

   public Hand getHand(int k)
   {
      // hands start from 0 like arrays

      // on error return automatic empty hand
      if (k < 0 || k >= numPlayers)
         return new Hand();

      return hand[k];
   }

   public Card getCardFromDeck() { return deck.dealCard(); }

   public int getNumCardsRemainingInDeck() { return deck.getNumCards(); }

   public void newGame()
   {
      int k, j;

      // clear the hands
      for (k = 0; k < numPlayers; k++)
         hand[k].resetHand();

      // restock the deck
      deck.init(numPacks);

      // remove unused cards
      for (k = 0; k < numUnusedCardsPerPack; k++)
         deck.removeCard( unusedCardsPerPack[k] );

      // add jokers
      for (k = 0; k < numPacks; k++)
         for ( j = 0; j < numJokersPerPack; j++)
            deck.addCard( new Card('X', Card.Suit.values()[j]) );

      // shuffle the cards
      deck.shuffle();
   }

   public boolean deal()
   {
      // returns false if not enough cards, but deals what it can
      int k, j;
      boolean enoughCards;

      // clear all hands
      for (j = 0; j < numPlayers; j++)
         hand[j].resetHand();

      enoughCards = true;
      for (k = 0; k < numCardsPerHand && enoughCards ; k++)
      {
         for (j = 0; j < numPlayers; j++)
            if (deck.getNumCards() > 0)
               hand[j].takeCard( deck.dealCard() );
            else
            {
               enoughCards = false;
               break;
            }
      }

      return enoughCards;
   }

   void sortHands()
   {
      int k;

      for (k = 0; k < numPlayers; k++)
         hand[k].sort();
   }

   Card playCard(int playerIndex, int cardIndex)
   {
      // returns bad card if either argument is bad
      if (playerIndex < 0 ||  playerIndex > numPlayers - 1 ||
          cardIndex < 0 || cardIndex > numCardsPerHand - 1)
      {
         //Creates a card that does not work
         return new Card('M', Card.Suit.spades);      
      }
   
      // return the card played
      return hand[playerIndex].playCard(cardIndex);
   
   }


   boolean takeCard(int playerIndex)
   {
      // returns false if either argument is bad
      if (playerIndex < 0 || playerIndex > numPlayers - 1)
         return false;
     
       // Are there enough Cards?
       if (deck.getNumCards() <= 0)
          return false;

       return hand[playerIndex].takeCard(deck.dealCard());
   }

}